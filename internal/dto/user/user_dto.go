// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package user

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// UserStatus User Status
	UserStatus *int32  `json:"userStatus,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUserFormdataRequestBody defines body for CreateUser for application/x-www-form-urlencoded ContentType.
type CreateUserFormdataRequestBody = User

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputJSONRequestBody = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserFormdataRequestBody defines body for UpdateUser for application/x-www-form-urlencoded ContentType.
type UpdateUserFormdataRequestBody = User

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
