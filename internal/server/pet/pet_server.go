// Package pet provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package pet

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	externalRef0 "github.com/ikhsanurasidb/oapi-codegen-multiple-packages-example/internal/dto/pet"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new pet to the store
	// (POST /pet)
	AddPet(c *gin.Context)
	// Update an existing pet
	// (PUT /pet)
	UpdatePet(c *gin.Context)
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(c *gin.Context, params FindPetsByStatusParams)
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(c *gin.Context, params FindPetsByTagsParams)
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(c *gin.Context, petId int64, params DeletePetParams)
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(c *gin.Context, petId int64)
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(c *gin.Context, petId int64, params UpdatePetWithFormParams)
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(c *gin.Context, petId int64, params UploadFileParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(c *gin.Context) {

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddPet(c)
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(c *gin.Context) {

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePet(c)
}

// FindPetsByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByStatus(c *gin.Context) {

	var err error

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByStatusParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindPetsByStatus(c, params)
}

// FindPetsByTags operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByTags(c *gin.Context) {

	var err error

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindPetsByTags(c, params)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(c *gin.Context) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Param("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter petId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePetParams

	headers := c.Request.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for api_key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "api_key", valueList[0], &ApiKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api_key: %w", err), http.StatusBadRequest)
			return
		}

		params.ApiKey = &ApiKey

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePet(c, petId, params)
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(c *gin.Context) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Param("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter petId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPetById(c, petId)
}

// UpdatePetWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatePetWithForm(c *gin.Context) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Param("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter petId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePetWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePetWithForm(c, petId, params)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(c *gin.Context) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Param("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter petId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", c.Request.URL.Query(), &params.AdditionalMetadata)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter additionalMetadata: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadFile(c, petId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/pet", wrapper.AddPet)
	router.PUT(options.BaseURL+"/pet", wrapper.UpdatePet)
	router.GET(options.BaseURL+"/pet/findByStatus", wrapper.FindPetsByStatus)
	router.GET(options.BaseURL+"/pet/findByTags", wrapper.FindPetsByTags)
	router.DELETE(options.BaseURL+"/pet/:petId", wrapper.DeletePet)
	router.GET(options.BaseURL+"/pet/:petId", wrapper.GetPetById)
	router.POST(options.BaseURL+"/pet/:petId", wrapper.UpdatePetWithForm)
	router.POST(options.BaseURL+"/pet/:petId/uploadImage", wrapper.UploadFile)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "a")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
